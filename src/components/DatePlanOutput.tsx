import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { MapPin, Clock, MessageCircle, AlertTriangle, Download, Share2, Star, ExternalLink, ChevronDown, ChevronUp, Info, Calendar, DollarSign, Activity, Users, Brain, Target, Zap } from 'lucide-react';

interface DatePlanOutputProps {
  profileData: any;
  completeDatePlan?: any;
}

const DatePlanOutput: React.FC<DatePlanOutputProps> = ({ profileData, completeDatePlan }) => {
  // Extract data from API response or use defaults
  const apiDatePlan = completeDatePlan?.final_date_plan;
  const activities = apiDatePlan?.date?.activities || [];
  const compatibilityScore = Math.round((apiDatePlan?.reasoning?.compatibility_analysis?.score || 0.92) * 100);
  const successProbability = Math.round((apiDatePlan?.reasoning?.success_prediction?.overall_probability || 0.85) * 100);
  
  const [connectionScore] = useState(compatibilityScore || 92);
  const [showScoreDetail, setShowScoreDetail] = useState(false);
  const [showTechnicalDetails, setShowTechnicalDetails] = useState(false);
  const [showLogistics, setShowLogistics] = useState(false);
  const [showPDF, setShowPDF] = useState(false);
  const [showWhatsApp, setShowWhatsApp] = useState(false);

  // Convert API activities to UI format
  const datePlan = activities.length > 0 ? activities.map((activity: any, index: number) => ({
    time: activity.time_slot || `${14 + index * 2}:00`,
    title: activity.name || "Activity",
    location: activity.location_name || "Location TBD",
    reason: activity.why_recommended || "Perfect for your personalities",
    spark: activity.conversation_topics?.join(" • ") || "What's your favorite memory from a place like this?",
    backup: activity.practical_notes?.weather_backup || "Weather backup available",
    tags: ["📍 Logistics", "💬 Connection Spark"],
    // Additional API data
    duration: activity.duration_minutes,
    activityType: activity.activity_type,
    googleMapsLink: activity.google_maps_link,
    whatToDo: activity.what_to_do || [],
    conversationTopics: activity.conversation_topics || [],
    practicalNotes: activity.practical_notes || {},
    routingToNext: activity.routing_to_next,
    sequence: activity.sequence
  })) : [
    // Fallback data if API doesn't return activities
    {
      time: "3:00 PM",
      title: "Art Break",
      location: "Stedelijk Museum Café",
      reason: "P2 liked 12+ modern art posts",
      spark: "You shared a Kusama exhibit—what moved you?",
      backup: "If busy, try Foam Gallery (we scanned Google Maps reviews)",
      tags: ["📍 Logistics", "💬 Connection Spark"]
    },
    {
      time: "5:30 PM",
      title: "Coffee & Conversations",
      location: "Café Central",
      reason: "Both mentioned loving deep conversations",
      spark: "What's a belief you've changed your mind about recently?",
      backup: "Alternative: Rooftop bar with city views",
      tags: ["💬 Connection Spark", "☕ Comfort Zone"]
    },
    {
      time: "7:45 PM",
      title: "Dinner Discovery",
      location: "De Kas Restaurant",
      reason: "P1's foodie vibes + P2's adventure spirit",
      spark: "Share your most memorable meal story",
      backup: "Rain backup: Cozy indoor market hall",
      tags: ["📍 Logistics", "🍽️ Experience"],
      duration: 120,
      activityType: "dining",
      googleMapsLink: "#",
      whatToDo: [],
      conversationTopics: [],
      practicalNotes: {},
      routingToNext: "",
      sequence: 3
    }
  ];

  const generateWhatsAppText = () => {
    const location = apiDatePlan?.date?.location_city || profileData.context?.location || 'Your City';
    const duration = apiDatePlan?.date?.total_duration || profileData.context?.duration || '4 hours';
    const timeOfDay = apiDatePlan?.processing_metadata?.input_context?.time_of_day || profileData.context?.time_of_day || 'evening';
    const theme = apiDatePlan?.date?.theme || 'Your Perfect Date';
    
    const whatsappText = `🌟 *${theme}* 🌟

📍 ${location}
⏰ ${duration} | 🌤️ ${timeOfDay}

*Our Plan:*
${datePlan.map((item, index) => 
  `*${item.time}* - ${item.title}${item.googleMapsLink ? ` 📍 ${item.googleMapsLink}` : ''}
📍 ${item.location}
${item.whatToDo && item.whatToDo.length > 0 ? `🎯 ${item.whatToDo.slice(0, 2).join(', ')}` : ''}
💬 ${item.conversationTopics && item.conversationTopics.length > 0 ? item.conversationTopics.slice(0, 2).join(' • ') : item.spark}
${item.practicalNotes?.cost ? `💰 ${item.practicalNotes.cost}` : ''}

`).join('')}🎯 *AI-more.me Score:* ${connectionScore}% compatibility!
${apiDatePlan?.reasoning?.frontend_display?.primary_highlight ? `\n✨ ${apiDatePlan.reasoning.frontend_display.primary_highlight}` : ''}

Generated by AI-more.me ✨`;
    
    return whatsappText;
  };

  const shareToWhatsApp = () => {
    const text = generateWhatsAppText();
    const encodedText = encodeURIComponent(text);
    const whatsappUrl = `https://wa.me/?text=${encodedText}`;
    window.open(whatsappUrl, '_blank');
  };

  const saveAsImage = () => {
    const location = apiDatePlan?.date?.location_city || profileData.context?.location || 'Your City';
    const duration = apiDatePlan?.date?.total_duration || profileData.context?.duration || '4 hours';
    const timeOfDay = apiDatePlan?.processing_metadata?.input_context?.time_of_day || profileData.context?.time_of_day || 'evening';
    const theme = apiDatePlan?.date?.theme || 'Your Perfect Date';
    
    // Create a canvas with the date plan content
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 1200;
    
    // Set background
    const gradient = ctx.createLinearGradient(0, 0, 800, 1200);
    gradient.addColorStop(0, '#DC2626');
    gradient.addColorStop(0.5, '#9333EA');
    gradient.addColorStop(1, '#059669');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 1200);
    
    // Add content
    ctx.fillStyle = 'white';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`🌟 ${theme}`, 400, 60);
    
    ctx.font = '18px Arial';
    ctx.fillText(`📍 ${location}`, 400, 100);
    ctx.fillText(`⏰ ${duration} | 🌤️ ${timeOfDay}`, 400, 130);
    
    // Add date plan items
    let yPos = 180;
    datePlan.forEach((item, index) => {
      ctx.font = 'bold 20px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(`${item.time} - ${item.title}`, 50, yPos);
      
      ctx.font = '16px Arial';
      ctx.fillText(`📍 ${item.location}`, 50, yPos + 25);
      
      // Add what to do if available
      if (item.whatToDo && item.whatToDo.length > 0) {
        ctx.fillText(`🎯 ${item.whatToDo[0]}`, 50, yPos + 45);
        yPos += 20;
      }
      
      // Wrap long text
      const sparkText = item.conversationTopics && item.conversationTopics.length > 0 
        ? item.conversationTopics[0] 
        : item.spark;
      const words = sparkText.split(' ');
      let line = '';
      let lineY = yPos + 65;
      words.forEach(word => {
        const testLine = line + word + ' ';
        if (ctx.measureText(testLine).width > 700) {
          ctx.fillText(`💬 "${line}"`, 50, lineY);
          line = word + ' ';
          lineY += 20;
        } else {
          line = testLine;
        }
      });
      ctx.fillText(`💬 "${line}"`, 50, lineY);
      
      yPos += 140;
    });
    
    // Add score
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`🎯 AI-more.me Score: ${connectionScore}%`, 400, yPos + 50);
    
    // Add primary highlight if available
    if (apiDatePlan?.reasoning?.frontend_display?.primary_highlight) {
      ctx.font = '16px Arial';
      ctx.fillText(`✨ ${apiDatePlan.reasoning.frontend_display.primary_highlight}`, 400, yPos + 80);
    }
    
    ctx.font = '14px Arial';
    ctx.fillText('Generated by AI-more.me ✨', 400, yPos + 120);
    
    // Download image
    canvas.toBlob(blob => {
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'ai-more-date-plan.png';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  };

  const downloadHTML = () => {
    const location = apiDatePlan?.date?.location_city || profileData.context?.location || 'Your City';
    const duration = apiDatePlan?.date?.total_duration || profileData.context?.duration || '4 hours';
    const timeOfDay = apiDatePlan?.processing_metadata?.input_context?.time_of_day || profileData.context?.time_of_day || 'evening';
    const theme = apiDatePlan?.date?.theme || 'Your Perfect Date';
    
    // Create a simple HTML content for PDF
    const pdfContent = `
      <html>
        <head>
          <title>${theme} - AI-more.me Date Plan</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
            .header { text-align: center; margin-bottom: 30px; }
            .score { background: linear-gradient(45deg, #10B981, #3B82F6); -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-size: 24px; font-weight: bold; }
            .item { margin-bottom: 25px; padding: 15px; border-left: 4px solid #EC4899; }
            .time { background: #EC4899; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px; }
            .location { color: #10B981; font-weight: bold; }
            .reason { margin: 8px 0; }
            .spark { font-style: italic; color: #3B82F6; }
            .what-to-do { background: #f0f9ff; padding: 10px; border-radius: 8px; margin: 8px 0; }
            .practical-notes { background: #fef3c7; padding: 10px; border-radius: 8px; margin: 8px 0; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>🌟 ${theme}</h1>
            <p><strong>Location:</strong> ${location}</p>
            <p><strong>Duration:</strong> ${duration} | <strong>Time:</strong> ${timeOfDay}</p>
          </div>
          
          ${datePlan.map((item, index) => `
            <div class="item">
              <span class="time">${item.time}</span>
              <h3>${item.title}</h3>
              <p class="location">📍 ${item.googleMapsLink ? `<a href="${item.googleMapsLink}" target="_blank">${item.location}</a>` : item.location}</p>
              ${item.whatToDo && item.whatToDo.length > 0 ? `
                <div class="what-to-do">
                  <strong>🎯 What to Do:</strong>
                  <ul>
                    ${item.whatToDo.map((task: string) => `<li>${task}</li>`).join('')}
                  </ul>
                </div>
              ` : ''}
              <p class="reason"><strong>Why:</strong> ${item.reason}</p>
              ${item.conversationTopics && item.conversationTopics.length > 0 ? `
                <p class="spark"><strong>Conversation starters:</strong></p>
                <ul>
                  ${item.conversationTopics.map((topic: string) => `<li>"${topic}"</li>`).join('')}
                </ul>
              ` : `<p class="spark"><strong>Conversation starter:</strong> "${item.spark}"</p>`}
              ${item.practicalNotes && Object.keys(item.practicalNotes).length > 0 ? `
                <div class="practical-notes">
                  <strong>📝 Practical Notes:</strong>
                  ${item.practicalNotes.cost ? `<p><strong>Cost:</strong> ${item.practicalNotes.cost}</p>` : ''}
                  ${item.practicalNotes.best_time ? `<p><strong>Best Time:</strong> ${item.practicalNotes.best_time}</p>` : ''}
                  ${item.practicalNotes.what_to_bring ? `<p><strong>What to Bring:</strong> ${item.practicalNotes.what_to_bring}</p>` : ''}
                  ${item.practicalNotes.weather_backup ? `<p><strong>Weather Backup:</strong> ${item.practicalNotes.weather_backup}</p>` : ''}
                </div>
              ` : ''}
              <p><strong>Backup:</strong> ${item.backup}</p>
              ${item.routingToNext ? `<p><strong>Getting to Next:</strong> ${item.routingToNext}</p>` : ''}
            </div>
          `).join('')}
          
          <div style="text-align: center; margin-top: 30px;">
            <h2>AI-more.me Score</h2>
            <div class="score">${connectionScore}%</div>
            <p>Based on ${completeDatePlan?.cultural_intelligence_summary?.total_discoveries_analyzed || 0} cultural discoveries analyzed</p>
            ${apiDatePlan?.reasoning?.frontend_display?.primary_highlight ? `<p><strong>${apiDatePlan.reasoning.frontend_display.primary_highlight}</strong></p>` : ''}
            <br>
            <p style="color: #666; font-size: 12px;">Generated by AI-more.me - Cultural Intelligence Dating Engine</p>
          </div>
        </body>
      </html>
    `;
    
    const blob = new Blob([pdfContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'date-plan.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      className="max-w-4xl mx-auto px-6 py-12"
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
    >
      {/* Header */}
      <div className="text-center mb-12">
        <motion.div
          className="flex items-center justify-center gap-3 mb-4"
          initial={{ y: -20 }}
          animate={{ y: 0 }}
        >
          <span className="text-4xl">📅</span>
          <h1 className="text-4xl font-bold text-white">This is your date plan</h1>
          <motion.span
            className="text-2xl cursor-pointer"
            animate={{ rotate: [0, 15, -15, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            ✨
          </motion.span>
        </motion.div>
        
        {/* Core Date Details */}
        {apiDatePlan?.date && (
          <motion.div
            className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-center">
              <div className="bg-white/5 rounded-xl p-4">
                <Calendar className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                <h3 className="text-white font-bold text-lg">{apiDatePlan.date.theme || 'Your Perfect Date'}</h3>
                <p className="text-white/70 text-sm">Theme</p>
              </div>
              
              <div className="bg-white/5 rounded-xl p-4">
                <MapPin className="w-6 h-6 text-green-400 mx-auto mb-2" />
                <h3 className="text-white font-bold text-lg">{apiDatePlan.date.location_city || 'Your City'}</h3>
                <p className="text-white/70 text-sm">Location</p>
              </div>
              
              <div className="bg-white/5 rounded-xl p-4">
                <Clock className="w-6 h-6 text-yellow-400 mx-auto mb-2" />
                <h3 className="text-white font-bold text-lg">
                  {apiDatePlan.date.start_time} - {apiDatePlan.date.end_time}
                </h3>
                <p className="text-white/70 text-sm">{apiDatePlan.date.total_duration}</p>
              </div>
              
              <div className="bg-white/5 rounded-xl p-4">
                <Users className="w-6 h-6 text-pink-400 mx-auto mb-2" />
                <h3 className="text-white font-bold text-lg">
                  {apiDatePlan.processing_metadata?.input_context?.date_type?.replace('_', ' ') || 'First Date'}
                </h3>
                <p className="text-white/70 text-sm">
                  {apiDatePlan.processing_metadata?.input_context?.time_of_day || 'Afternoon'}
                </p>
              </div>
            </div>
          </motion.div>
        )}
      </div>

      {/* Date Plan Itinerary */}
      <div className="space-y-6 mb-8">
        {datePlan.map((item, index) => (
          <motion.div
            key={index}
            className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all"
            initial={{ x: -50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.5 + index * 0.2 }}
            whileHover={{ 
              scale: 1.02,
              rotateY: 2,
              rotateX: 1
            }}
            style={{ transformStyle: 'preserve-3d' }}
          >
            <div className="flex items-start gap-4">
              <motion.div
                className="bg-gradient-to-r from-pink-500 to-red-500 text-white px-3 py-1 rounded-full font-bold text-sm"
                whileHover={{ scale: 1.1 }}
              >
                <Clock className="w-4 h-4 inline mr-1" />
                {item.time}
              </motion.div>
              
              <div className="flex-1">
                <h3 className="text-xl font-bold text-white mb-2">{item.title}</h3>
                
                <div className="flex items-center gap-2 mb-4">
                  <MapPin className="w-4 h-4 text-green-400" />
                  {item.googleMapsLink ? (
                    <a 
                      href={item.googleMapsLink} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-white/90 hover:text-green-300 transition-colors flex items-center gap-1"
                    >
                      {item.location}
                      <ExternalLink className="w-3 h-3" />
                    </a>
                  ) : (
                    <span className="text-white/90">{item.location}</span>
                  )}
                  {item.duration && (
                    <>
                      <span className="text-white/50">•</span>
                      <span className="text-white/70 text-sm">{item.duration} min</span>
                    </>
                  )}
                  {item.activityType && (
                    <>
                      <span className="text-white/50">•</span>
                      <span className="text-white/70 text-sm capitalize">{item.activityType}</span>
                    </>
                  )}
                </div>

                <div className="space-y-3 mb-4">
                  {/* What to Do */}
                  {item.whatToDo && item.whatToDo.length > 0 && (
                    <div>
                      <h4 className="text-white/90 font-medium mb-2 flex items-center gap-2">
                        <Activity className="w-4 h-4 text-blue-400" />
                        What to Do:
                      </h4>
                      <ul className="text-white/80 text-sm space-y-1 ml-6">
                        {item.whatToDo.map((task: string, taskIndex: number) => (
                          <li key={taskIndex} className="flex items-start gap-2">
                            <span className="text-blue-400 mt-1">•</span>
                            {task}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {/* Why Recommended */}
                  <p className="text-white/80">
                    <span className="font-medium">🎨 Why?</span> {item.reason}
                  </p>
                  
                  {/* Conversation Topics */}
                  {item.conversationTopics && item.conversationTopics.length > 0 && (
                    <div>
                      <h4 className="text-white/90 font-medium mb-2 flex items-center gap-2">
                        <MessageCircle className="w-4 h-4 text-blue-400" />
                        Conversation Starters:
                      </h4>
                      <ul className="text-white/80 text-sm space-y-1 ml-6">
                        {item.conversationTopics.map((topic: string, topicIndex: number) => (
                          <li key={topicIndex} className="flex items-start gap-2">
                            <span className="text-blue-400 mt-1">•</span>
                            "{topic}"
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {/* Practical Notes */}
                  {item.practicalNotes && Object.keys(item.practicalNotes).length > 0 && (
                    <div>
                      <h4 className="text-white/90 font-medium mb-2 flex items-center gap-2">
                        <Info className="w-4 h-4 text-yellow-400" />
                        Practical Notes:
                      </h4>
                      <div className="text-white/80 text-sm space-y-1 ml-6">
                        {item.practicalNotes.best_time && (
                          <p><span className="text-yellow-400">⏰ Best Time:</span> {item.practicalNotes.best_time}</p>
                        )}
                        {item.practicalNotes.cost && (
                          <p><span className="text-green-400">💰 Cost:</span> {item.practicalNotes.cost}</p>
                        )}
                        {item.practicalNotes.what_to_bring && (
                          <p><span className="text-blue-400">🎒 Bring:</span> {item.practicalNotes.what_to_bring}</p>
                        )}
                        {item.practicalNotes.weather_backup && (
                          <p><span className="text-orange-400">☔ Backup:</span> {item.practicalNotes.weather_backup}</p>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Routing to Next */}
                  {item.routingToNext && (
                    <div>
                      <h4 className="text-white/90 font-medium mb-2 flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-purple-400" />
                        Getting to Next Activity:
                      </h4>
                      <p className="text-white/80 text-sm ml-6">{item.routingToNext}</p>
                    </div>
                  )}
                </div>

                <div className="flex gap-2 flex-wrap">
                  {item.tags.map((tag, tagIndex) => (
                    <motion.span
                      key={tagIndex}
                      className={`px-3 py-1 rounded-full text-xs font-medium ${
                        tag.includes('Logistics') 
                          ? 'bg-gray-500/20 text-gray-300 hover:bg-red-500/20 hover:text-red-300' 
                          : tag.includes('Connection')
                          ? 'bg-blue-500/20 text-blue-300'
                          : 'bg-purple-500/20 text-purple-300'
                      } transition-all cursor-pointer`}
                      whileHover={{ 
                        scale: 1.1,
                        y: tag.includes('Connection') ? [-2, 2, -2, 0] : 0
                      }}
                      transition={{ duration: 0.3 }}
                    >
                      {tag}
                    </motion.span>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Overall Logistics */}
      {apiDatePlan?.date?.logistics && (
        <motion.div
          className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 mb-8 cursor-pointer hover:border-white/40 transition-all"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.4 }}
          onClick={() => setShowLogistics(!showLogistics)}
          whileHover={{ scale: 1.02 }}
        >
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-2xl font-bold text-white flex items-center gap-2">
              <MapPin className="w-6 h-6 text-green-400" />
              Date Logistics
            </h3>
            <motion.div
              animate={{ rotate: showLogistics ? 180 : 0 }}
              transition={{ duration: 0.3 }}
            >
              <ChevronDown className="w-5 h-5 text-white/60" />
            </motion.div>
          </div>
          
          {showLogistics && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {apiDatePlan.date.logistics.total_walking_distance && (
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                      <Activity className="w-4 h-4 text-blue-400" />
                      Walking Distance
                    </h4>
                    <p className="text-white/80">{apiDatePlan.date.logistics.total_walking_distance}</p>
                  </div>
                )}
                
                {apiDatePlan.date.logistics.transport_needed && (
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                      <MapPin className="w-4 h-4 text-green-400" />
                      Transport Needed
                    </h4>
                    <p className="text-white/80">{apiDatePlan.date.logistics.transport_needed}</p>
                  </div>
                )}
                
                {apiDatePlan.date.logistics.cost_estimate && (
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                      <DollarSign className="w-4 h-4 text-yellow-400" />
                      Cost Estimate
                    </h4>
                    <p className="text-white/80">{apiDatePlan.date.logistics.cost_estimate}</p>
                  </div>
                )}
                
                {apiDatePlan.date.logistics.energy_level && (
                  <div className="bg-white/5 rounded-xl p-4">
                    <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                      <Zap className="w-4 h-4 text-orange-400" />
                      Energy Level
                    </h4>
                    <p className="text-white/80">{apiDatePlan.date.logistics.energy_level}</p>
                  </div>
                )}
              </div>
              
              {apiDatePlan.date.logistics.weather_adaptations && (
                <div className="mt-4 bg-white/5 rounded-xl p-4">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <AlertTriangle className="w-4 h-4 text-yellow-400" />
                    Weather Adaptations
                  </h4>
                  <p className="text-white/80">{apiDatePlan.date.logistics.weather_adaptations}</p>
                </div>
              )}
            </motion.div>
          )}
        </motion.div>
      )}

      {/* AI-more.me Score */}
      <motion.div
        className="bg-gradient-to-r from-green-500/20 to-blue-500/20 backdrop-blur-md rounded-2xl p-6 border border-green-400/30 mb-8 cursor-pointer hover:border-green-400/50 transition-all"
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ delay: 0.3 }}
        onClick={() => setShowScoreDetail(!showScoreDetail)}
        whileHover={{ scale: 1.02 }}
      >
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-2xl font-bold text-white mb-2 flex items-center gap-2">
              AI-more.me Score
              <motion.span
                className="text-sm bg-white/10 px-2 py-1 rounded-full"
                animate={{ opacity: [0.5, 1, 0.5] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                Click to see why
              </motion.span>
            </h3>
            <motion.div
              className="text-6xl font-bold bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent"
              whileHover={{ scale: 1.1 }}
            >
              {connectionScore}%
            </motion.div>
          </div>
          
          {/* Radial Progress */}
          <div className="relative w-32 h-32">
            <svg className="w-32 h-32 transform -rotate-90">
              <circle
                cx="64"
                cy="64"
                r="56"
                stroke="rgba(255,255,255,0.1)"
                strokeWidth="8"
                fill="none"
              />
              <motion.circle
                cx="64"
                cy="64"
                r="56"
                stroke="url(#scoreGradient)"
                strokeWidth="8"
                fill="none"
                strokeLinecap="round"
                initial={{ pathLength: 0 }}
                animate={{ pathLength: connectionScore / 100 }}
                transition={{ duration: 2, ease: "easeOut" }}
                style={{
                  strokeDasharray: `${2 * Math.PI * 56}`,
                  strokeDashoffset: `${2 * Math.PI * 56 * (1 - connectionScore / 100)}`
                }}
              />
              <defs>
                <linearGradient id="scoreGradient">
                  <stop offset="0%" stopColor="#10B981" />
                  <stop offset="100%" stopColor="#3B82F6" />
                </linearGradient>
              </defs>
            </svg>
            
            {/* Emoji Explosions */}
            {[...Array(5)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute top-1/2 left-1/2 text-lg"
                initial={{ scale: 0, opacity: 0 }}
                animate={{
                  scale: [0, 1, 0],
                  opacity: [0, 1, 0],
                  x: Math.cos(i * 72 * Math.PI / 180) * 40,
                  y: Math.sin(i * 72 * Math.PI / 180) * 40,
                }}
                transition={{ duration: 1, delay: 1.5 + i * 0.1 }}
              >
                {['🎉', '✨', '💘', '🌟', '🔥'][i]}
              </motion.div>
            ))}
          </div>
        </div>

        {showScoreDetail && (
          <motion.div
            className="mt-4 pt-4 border-t border-white/20"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
          >
            <div className="space-y-6">
              <h4 className="text-lg font-semibold text-white mb-3">Detailed Analysis:</h4>
              
              {/* Compatibility Analysis */}
              {apiDatePlan?.reasoning?.compatibility_analysis && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h5 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Brain className="w-4 h-4 text-purple-400" />
                    Compatibility Analysis ({Math.round(apiDatePlan.reasoning.compatibility_analysis.score * 100)}%)
                  </h5>
                  
                  {/* Score Breakdown */}
                  {apiDatePlan.reasoning.compatibility_analysis.score_breakdown && (
                    <div className="grid grid-cols-2 gap-3 mb-4">
                      <div className="text-sm">
                        <span className="text-white/70">Shared Values:</span>
                        <span className="text-green-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.compatibility_analysis.score_breakdown.shared_values * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Complementary Traits:</span>
                        <span className="text-blue-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.compatibility_analysis.score_breakdown.complementary_traits * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Activity Alignment:</span>
                        <span className="text-yellow-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.compatibility_analysis.score_breakdown.activity_alignment * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Conversation Potential:</span>
                        <span className="text-pink-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.compatibility_analysis.score_breakdown.conversation_potential * 100)}%
                        </span>
                      </div>
                    </div>
                  )}
                  
                  {/* Strengths */}
                  {apiDatePlan.reasoning.compatibility_analysis.strengths && (
                    <div className="mb-3">
                      <h6 className="text-white/90 font-medium mb-2">Strengths:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.compatibility_analysis.strengths.map((strength: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-green-400 mt-1">✓</span>
                            {strength}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Potential Challenges */}
                  {apiDatePlan.reasoning.compatibility_analysis.potential_challenges && (
                    <div>
                      <h6 className="text-white/90 font-medium mb-2">Potential Challenges:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.compatibility_analysis.potential_challenges.map((challenge: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-yellow-400 mt-1">⚠</span>
                            {challenge}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {/* Cultural Intelligence */}
              {apiDatePlan?.reasoning?.cultural_intelligence && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h5 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Brain className="w-4 h-4 text-blue-400" />
                    Cultural Intelligence Analysis
                  </h5>
                  
                  <div className="grid grid-cols-2 gap-4 mb-3">
                    <div className="text-sm">
                      <span className="text-white/70">Discoveries Analyzed:</span>
                      <span className="text-blue-400 font-bold ml-2">
                        {apiDatePlan.reasoning.cultural_intelligence.total_discoveries_analyzed || completeDatePlan?.cultural_intelligence_summary?.total_discoveries_analyzed || 0}
                      </span>
                    </div>
                    <div className="text-sm">
                      <span className="text-white/70">Cross-Domain Connections:</span>
                      <span className="text-purple-400 font-bold ml-2">
                        {apiDatePlan.reasoning.cultural_intelligence.cross_domain_connections || 0}
                      </span>
                    </div>
                  </div>
                  
                  {/* Personality Venue Matches */}
                  {apiDatePlan.reasoning.cultural_intelligence.personality_venue_matches && (
                    <div className="mb-3">
                      <h6 className="text-white/90 font-medium mb-2">Personality-Venue Matches:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.cultural_intelligence.personality_venue_matches.map((match: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-blue-400 mt-1">🎯</span>
                            {match}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Qloo Influence */}
                  {apiDatePlan.reasoning.cultural_intelligence.qloo_influence && (
                    <div>
                      <h6 className="text-white/90 font-medium mb-2">Cultural Intelligence:</h6>
                      <p className="text-white/80 text-sm">{apiDatePlan.reasoning.cultural_intelligence.qloo_influence}</p>
                    </div>
                  )}
                </div>
              )}
              
              {/* Success Prediction */}
              {apiDatePlan?.reasoning?.success_prediction && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h5 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Target className="w-4 h-4 text-green-400" />
                    Success Prediction ({Math.round(apiDatePlan.reasoning.success_prediction.overall_probability * 100)}%)
                  </h5>
                  
                  {/* Factor Breakdown */}
                  {apiDatePlan.reasoning.success_prediction.factors && (
                    <div className="grid grid-cols-2 gap-3 mb-4">
                      <div className="text-sm">
                        <span className="text-white/70">Venue Quality:</span>
                        <span className="text-green-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.success_prediction.factors.venue_quality * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Activity Engagement:</span>
                        <span className="text-blue-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.success_prediction.factors.activity_engagement * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Conversation Flow:</span>
                        <span className="text-yellow-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.success_prediction.factors.conversation_flow * 100)}%
                        </span>
                      </div>
                      <div className="text-sm">
                        <span className="text-white/70">Practical Logistics:</span>
                        <span className="text-pink-400 font-bold ml-2">
                          {Math.round(apiDatePlan.reasoning.success_prediction.factors.practical_logistics * 100)}%
                        </span>
                      </div>
                    </div>
                  )}
                  
                  {/* Optimization Notes */}
                  {apiDatePlan.reasoning.success_prediction.optimization_notes && (
                    <div>
                      <h6 className="text-white/90 font-medium mb-2">Optimization Notes:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.success_prediction.optimization_notes.map((note: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-green-400 mt-1">💡</span>
                            {note}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {/* Frontend Display Information */}
              {apiDatePlan?.reasoning?.frontend_display && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h5 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Star className="w-4 h-4 text-yellow-400" />
                    Key Highlights
                  </h5>
                  
                  {apiDatePlan.reasoning.frontend_display.primary_highlight && (
                    <div className="mb-3">
                      <p className="text-yellow-300 font-bold text-lg">
                        {apiDatePlan.reasoning.frontend_display.primary_highlight}
                      </p>
                    </div>
                  )}
                  
                  {/* Key Selling Points */}
                  {apiDatePlan.reasoning.frontend_display.key_selling_points && (
                    <div className="mb-3">
                      <h6 className="text-white/90 font-medium mb-2">Key Selling Points:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.frontend_display.key_selling_points.map((point: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-yellow-400 mt-1">⭐</span>
                            {point}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Practical Benefits */}
                  {apiDatePlan.reasoning.frontend_display.practical_benefits && (
                    <div className="mb-3">
                      <h6 className="text-white/90 font-medium mb-2">Practical Benefits:</h6>
                      <div className="space-y-1">
                        {apiDatePlan.reasoning.frontend_display.practical_benefits.map((benefit: string, index: number) => (
                          <p key={index} className="text-white/80 flex items-start gap-2 text-sm">
                            <span className="text-green-400 mt-1">✅</span>
                            {benefit}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {apiDatePlan.reasoning.frontend_display.conversation_starters_count && (
                    <div className="text-sm">
                      <span className="text-white/70">Total Conversation Starters:</span>
                      <span className="text-blue-400 font-bold ml-2">
                        {apiDatePlan.reasoning.frontend_display.conversation_starters_count}
                      </span>
                    </div>
                  )}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </motion.div>

      {/* Technical Details */}
      <motion.div
        className="bg-white/5 backdrop-blur-md rounded-2xl p-6 border border-white/20 mb-8 cursor-pointer hover:border-white/40 transition-all"
        initial={{ y: 50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 1.2 }}
        onClick={() => setShowTechnicalDetails(!showTechnicalDetails)}
        whileHover={{ scale: 1.01 }}
      >
        <div className="flex items-center justify-between">
          <h3 className="text-xl font-bold text-white flex items-center gap-2">
            <Brain className="w-5 h-5 text-purple-400" />
            Processing Insights
            <span className="text-sm bg-white/10 px-2 py-1 rounded-full">
              Click to expand
            </span>
          </h3>
          <motion.div
            animate={{ rotate: showTechnicalDetails ? 180 : 0 }}
            transition={{ duration: 0.3 }}
          >
            <ChevronDown className="w-5 h-5 text-white/60" />
          </motion.div>
        </div>
        
        {showTechnicalDetails && (
          <motion.div
            className="mt-4 pt-4 border-t border-white/20"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Processing Performance */}
              {completeDatePlan?.pipeline_performance && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h4 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Zap className="w-4 h-4 text-yellow-400" />
                    Processing Time
                  </h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-white/70">Total:</span>
                      <span className="text-white font-bold">{completeDatePlan.pipeline_performance.total_time_seconds}s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Profile Analysis:</span>
                      <span className="text-white">{completeDatePlan.pipeline_performance.step_1_time}s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Cultural Discovery:</span>
                      <span className="text-white">{completeDatePlan.pipeline_performance.step_2_time}s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Compatibility:</span>
                      <span className="text-white">{completeDatePlan.pipeline_performance.step_34_time}s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Venue Discovery:</span>
                      <span className="text-white">{completeDatePlan.pipeline_performance.step_5_time}s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Final Optimization:</span>
                      <span className="text-white">{completeDatePlan.pipeline_performance.step_6_time}s</span>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Cultural Intelligence Summary */}
              {completeDatePlan?.cultural_intelligence_summary && (
                <div className="bg-white/5 rounded-xl p-4">
                  <h4 className="text-white font-medium mb-3 flex items-center gap-2">
                    <Brain className="w-4 h-4 text-blue-400" />
                    Intelligence Summary
                  </h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-white/70">Discoveries:</span>
                      <span className="text-blue-400 font-bold">{completeDatePlan.cultural_intelligence_summary.total_discoveries_analyzed}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Venues Analyzed:</span>
                      <span className="text-green-400 font-bold">{completeDatePlan.cultural_intelligence_summary.venues_selected}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Final Activities:</span>
                      <span className="text-yellow-400 font-bold">{completeDatePlan.cultural_intelligence_summary.final_activities}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Location:</span>
                      <span className="text-white capitalize">{completeDatePlan.cultural_intelligence_summary.location}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-white/70">Dual Profile:</span>
                      <span className="text-purple-400">{completeDatePlan.cultural_intelligence_summary.dual_profile_mode ? 'Yes' : 'No'}</span>
                    </div>
                  </div>
                </div>
              )}
              
              {/* System Information */}
              <div className="bg-white/5 rounded-xl p-4">
                <h4 className="text-white font-medium mb-3 flex items-center gap-2">
                  <Info className="w-4 h-4 text-gray-400" />
                  System Info
                </h4>
                <div className="space-y-2 text-sm">
                  {completeDatePlan?.request_id && (
                    <div>
                      <span className="text-white/70">Request ID:</span>
                      <p className="text-white font-mono text-xs break-all">{completeDatePlan.request_id}</p>
                    </div>
                  )}
                  <div className="flex justify-between">
                    <span className="text-white/70">Status:</span>
                    <span className="text-green-400 capitalize">{completeDatePlan?.status || 'Complete'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-white/70">Progress:</span>
                    <span className="text-green-400">{completeDatePlan?.overall_progress || 100}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-white/70">Backend:</span>
                    <span className="text-blue-400">{completeDatePlan?.redis_backend ? 'Redis' : 'Memory'}</span>
                  </div>
                  {apiDatePlan?.processing_metadata?.demo_ready && (
                    <div className="flex justify-between">
                      <span className="text-white/70">Demo Ready:</span>
                      <span className="text-green-400">✅ Yes</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </motion.div>

      {/* Export Options */}
      <motion.div
        className="bg-white/5 backdrop-blur-md rounded-2xl p-6 border border-white/20 mb-8"
        initial={{ y: 50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 1.5 }}
      >
        <h3 className="text-xl font-bold text-white mb-4">Export Your Plan</h3>
        <div className="flex gap-4 flex-wrap">
          <motion.button
            className="flex items-center gap-2 bg-purple-500/20 hover:bg-purple-500/30 text-purple-300 px-4 py-2 rounded-xl transition-all"
            onClick={saveAsImage}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-4 h-4" />
            Save as Image
          </motion.button>
          
          <motion.button
            className="flex items-center gap-2 bg-red-500/20 hover:bg-red-500/30 text-red-300 px-4 py-2 rounded-xl transition-all"
            onClick={downloadHTML}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-4 h-4" />
            Save as HTML
          </motion.button>
          
          <motion.button
            className="flex items-center gap-2 bg-green-500/20 hover:bg-green-500/30 text-green-300 px-4 py-2 rounded-xl transition-all"
            onClick={shareToWhatsApp}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Share2 className="w-4 h-4" />
            Share on WhatsApp
          </motion.button>
        </div>
      </motion.div>

      {/* Start Over Button */}
      <motion.div
        className="text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 2 }}
      >
        <motion.button
          className="bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold py-3 px-6 rounded-full"
          onClick={() => window.location.reload()}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          Plan Another Date ✨
        </motion.button>
      </motion.div>
    </motion.div>
  );
};

export default DatePlanOutput;